{
  pkgs,
  config,
  ...
}:

let
  siteDomain = "hs.antob.se";
  port = 9080;
  adminUser = "admin";
  secrets = config.sops.secrets;

  aclConfig = {
    # Groups definition
    groups = {
      "group:admins" = [ "${adminUser}@" ];
    };

    acls = [
      # Allow all connections within the tailnet
      {
        action = "accept";
        src = [ "*" ];
        dst = [ "*:*" ];
      }
      # Allow admin to connect to their own services
      {
        action = "accept";
        src = [ "${adminUser}@" ];
        dst = [ "${adminUser}@:*" ];
      }
    ];

    # Auto-approvers section for routes
    autoApprovers = {
      routes = {
        "0.0.0.0/0" = [ "${adminUser}@" ];
        "192.168.1.0/24" = [ "${adminUser}@" ];
      };

      exitNode = [ "${adminUser}@" ];
    };
  };

  # Convert to JSON format with comments
  aclJson = ''
    // Headscale ACL Policy - Generated by NixOS
    // Admin user: ${adminUser}

    ${builtins.toJSON aclConfig}
  '';
  aclFile = pkgs.writeText "acl-policy.json" aclJson;
in
{
  services = {
    headscale = {
      enable = true;
      port = port;
      address = "127.0.0.1";
      settings = {
        server_url = "https://${siteDomain}:443";
        dns = {
          base_domain = "antob.net";
          override_local_dns = true;
          nameservers = {
            global = [
              "192.168.1.4"
              "1.1.1.1"
              "1.0.0.1"
            ];
            split = {
              "antob.net" = "192.168.1.4";
            };
          };
        };
        logtail.enabled = false;
        policy.path = "${aclFile}";
      };
    };

    tailscale = {
      enable = true;
      authKeyFile = secrets.tailscale_auth_key.path;
      useRoutingFeatures = "both";
      extraUpFlags = [
        "--login-server=${config.services.headscale.settings.server_url}"
        "--advertise-routes=192.168.1.0/24"
        "--accept-routes"
      ];
    };

    networkd-dispatcher = {
      enable = true;
      rules."50-tailscale" = {
        onState = [ "routable" ];
        script = ''
          NETDEV=$(ip -o route get 8.8.8.8 | cut -f 5 -d " ")
          ${pkgs.ethtool}/bin/ethtool -K "$NETDEV" rx-udp-gro-forwarding on rx-gro-list off
        '';
      };
    };

    caddy.virtualHosts."${siteDomain}".extraConfig = ''
      reverse_proxy 127.0.0.1:${toString port}
    '';
  };

  # Create a systemd service to ensure the admin user exists
  systemd.services.headscale-ensure-admin = {
    description = "Ensure Headscale admin user exists";
    after = [ "headscale.service" ];
    requires = [ "headscale.service" ];
    wantedBy = [ "multi-user.target" ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      User = "headscale";
      Group = "headscale";
    };

    script = ''
      # Check if user exists and create if needed
      if ! ${pkgs.headscale}/bin/headscale users list | grep -q "${adminUser}"; then
        echo "Creating headscale admin user: ${adminUser}"
        ${pkgs.headscale}/bin/headscale users create "${adminUser}"
      else
        echo "Headscale admin user ${adminUser} already exists"
      fi
    '';
  };

  # Tailscale preauth key
  sops.secrets.tailscale_auth_key = { };
}
